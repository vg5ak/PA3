
package mjparser;
import ast.node.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import exceptions.*;


parser code {:

    public PrintWriter out;

    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error",
                                          tok.line, tok.pos);
    }

    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] "
                               + message + " at " + tok.toString() );
    }

:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal List<IStatement> statement_list;
non terminal MainClass main_class;
non terminal IStatement block_statement;

/* Declare precedence and associativity  here */
precedence left EQUAL;
precedence left AND;
precedence right NOT;
precedence left ELSE;
precedence left BYTE;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence right UMINUS;


/* Meggy Java Grammar */
start with program;

program ::=
    IMPORT:i MEGGY SEMI main_class:m
    {:RESULT = new Program(i.line, i.pos, m, new LinkedList<IClassDecl>());:}
    ;
exp ::=
     exp:a AND:op exp:b {:RESULT = new AndExp(op.line, op.pos, a, b);:}
    |exp:a EQUAL:op exp:b {:RESULT = new EqualExp(op.line, op.pos, a, b);:}
    |exp:a PLUS:op exp:b {:RESULT = new PlusExp(op.line, op.pos, a, b);:}
    |exp:a MINUS:op exp:b {:RESULT = new MinusExp(op.line, op.pos, a, b);:}
    |exp:a TIMES:op exp:b {:RESULT = new MulExp(op.line, op.pos, a, b);:}
    | MINUS:op exp:b {: RESULT = new NegExp(op.line, op.pos, b);:}%prec UMINUS
    |MEGGYGETPIXEL LPAREN exp:a COMMA exp:b RPAREN:op
    {: RESULT = new MeggyGetPixel(op.line, op.pos, a,b);
    :}
    |MEGGYCHECKBUTTON LPAREN exp:a RPAREN:op
    {: RESULT = new MeggyCheckButton(op.line, op.pos, a);
    :}
    |LPAREN BYTE RPAREN exp:a
    {: RESULT = new ByteCast(a.getLine(), a.getPos(), (IExp)a);

    :}%prec BYTE
    | INT_LITERAL:a
    {: RESULT = new IntLiteral(a.line, a.pos, a.lexeme, a.value);

    :}
    | COLOR_LITERAL:b
    {: RESULT = new ColorLiteral(b.line, b.pos, b.lexeme, b.value);

    :}
    | BUTTON_LITERAL:a
    {: RESULT = new ButtonLiteral(a.line, a.pos, a.lexeme, a.value);:}
    | TRUE:t {:RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);:}
    | FALSE:t {:RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);:}
    | NOT:op exp:a {: RESULT = new NotExp(op.line, op.pos, a);:}
    | LPAREN exp:a RPAREN{: RESULT = a;:}
    ;
statement ::=
    LBRACE:l statement_list:a RBRACE {:RESULT = new BlockStatement(l.line,l.pos,a);:}
    |MEGGYSETPIXEL:m LPAREN exp:a COMMA exp:b COMMA exp:c RPAREN SEMI
    {: RESULT = new MeggySetPixel(m.line, m.pos, a, b, c);

    :}
    |MEGGYDELAY:m LPAREN exp:a RPAREN SEMI
    {: RESULT = new MeggyDelay(m.line, m.pos, a);:}
    |IF:op LPAREN exp:a RPAREN statement:b
    {: RESULT = new IfStatement(op.line, op.pos, a, b, null);:}
    |IF:op LPAREN exp:a RPAREN statement:b ELSE statement:c
    {: RESULT = new IfStatement(op.line, op.pos, a, b, c);:}
    |WHILE:op LPAREN exp:a RPAREN statement:b
    {: RESULT = new WhileStatement(op.line, op.pos, a, b);:}
    ;
statement_list ::=
     statement_list:s1 statement:s2
     {: s1.add(s2); RESULT = s1;:}
    |{:RESULT = new LinkedList<IStatement>();:}
    ;

block_statement ::=
    LBRACE:l statement_list:s1 RBRACE
      {:RESULT = new BlockStatement(l.line, l.pos, s1);:}
    ;

main_class ::=
        CLASS:op ID:name
            {: /*java.io.PrintStream sout
                    = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);*/
                // Check filename is class name, if not exit with error message
                if(!parser.programName.equals(name.lexeme+".java"))
                {
                    System.exit(0);
                }


            :}
        LBRACE PUBLIC STATIC VOID MAIN
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        //LBRACE
          //{:
            /*System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;

            BufferedReader reader=null;

            try {
                // The syntax for loading a text resource file
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue
                    = this.getClass().getClassLoader().getResourceAsStream(
                        "avrH.rtl.s");
                reader = new BufferedReader(new
                    InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null) mainPrologue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }*/
          //:}
        block_statement:list
          {:
          :}
        RBRACE
          {:
              /*System.out.println("Generate epilog using avrF.rtl.s");
          InputStream mainEpilogue=null;BufferedReader reader2=null;
          try {
          mainEpilogue
              = this.getClass().getClassLoader().getResourceAsStream(
                  "avrF.rtl.s");
          reader2 = new BufferedReader(new
              InputStreamReader(mainEpilogue));

          String line = null;
          while ((line = reader2.readLine()) != null) {
            parser.out.println(line);
          }
          } catch ( Exception e2) {
          e2.printStackTrace();
          }
          finally{
          try{
              if(mainEpilogue!=null) mainEpilogue.close();
              if(reader2!=null) reader2.close();
          }
          catch (IOException e) {
             e.printStackTrace();
          }
      }
            parser.out.flush();*/
            RESULT = new MainClass(op.line, op.pos, name.lexeme,param.lexeme, list);
          :}
    ;
